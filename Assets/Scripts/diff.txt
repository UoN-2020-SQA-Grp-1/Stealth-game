diff --git a/Assets/Scripts/Initialise.cs b/Assets/Scripts/Initialise.cs
new file mode 100644
index 0000000..805fe4e
--- /dev/null
+++ b/Assets/Scripts/Initialise.cs
@@ -0,0 +1,19 @@
+﻿using System.Collections;
+using System.Collections.Generic;
+using UnityEngine;
+
+public class Initialise : MonoBehaviour
+{
+    public GameObject[] npcs;
+    private const int NUM_NPCS = 3;
+    // Start is called before the first frame update
+    void Start()
+    {
+        for (int i = 0; i < NUM_NPCS; ++i)
+        {
+            string tag = "waypoints" + i;
+            GameObject[] points = GameObject.FindGameObjectsWithTag(tag);
+            Instantiate(npcs[i], points[0].transform.position, Quaternion.identity);
+        }
+    }
+}
diff --git a/Assets/Scripts/Initialise.cs.meta b/Assets/Scripts/Initialise.cs.meta
new file mode 100644
index 0000000..39fb05e
--- /dev/null
+++ b/Assets/Scripts/Initialise.cs.meta
@@ -0,0 +1,11 @@
+fileFormatVersion: 2
+guid: 207ec81c1258ac2469f36c14a7afc94d
+MonoImporter:
+  externalObjects: {}
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Scripts/MouseLook.cs b/Assets/Scripts/MouseLook.cs
index a2b4122..d119806 100644
--- a/Assets/Scripts/MouseLook.cs
+++ b/Assets/Scripts/MouseLook.cs
@@ -10,6 +10,8 @@ public class MouseLook : MonoBehaviour
     public IInputReader InputReader;
 
     float xRotation = 0f;
+    private bool isCrouched = false;
+    
     public MouseLook()
     {
         InputReader = new InputReader();
@@ -33,5 +35,19 @@ public class MouseLook : MonoBehaviour
         // Make it so movement is relative to the rotation of the camera.
         transform.localRotation = Quaternion.Euler(xRotation, 0f, 0f); 
         PlayerBody.Rotate(Vector3.up * mouseX);
+
+        if (InputReader.getButtonDown("Crouch"))
+        {
+            setCrouched();
+        }
+    }
+
+    void setCrouched()
+    {
+        isCrouched = !isCrouched;
+        Vector3 camPosition = transform.position;
+        float y = isCrouched ? camPosition.y - 3 : camPosition.y + 3;
+        camPosition.y = y;
+        transform.position = camPosition;
     }
 }
diff --git a/Assets/Scripts/NPC.cs b/Assets/Scripts/NPC.cs
new file mode 100644
index 0000000..e4269b5
--- /dev/null
+++ b/Assets/Scripts/NPC.cs
@@ -0,0 +1,49 @@
+﻿using System.Collections;
+using System.Collections.Generic;
+using UnityEngine;
+using UnityEngine.AI;
+
+public class NPC : MonoBehaviour
+{
+    public GameObject ob;
+    public List<Transform> waypoints;
+    private int waypointsIndex;
+    private NavMeshAgent agent;
+    private static int npcCount = 0;
+    private int id;
+
+    // Start is called before the first frame update
+    void Start()
+    {
+        id = npcCount++;
+        agent = GetComponent<NavMeshAgent>();
+        agent.autoBraking = false;
+        string tag = "waypoints" + id;
+        GameObject[] points = GameObject.FindGameObjectsWithTag(tag);
+        foreach (GameObject p in points)
+        {
+            waypoints.Add(p.transform);        
+        }
+        GoToNextWaypoint();
+    }
+
+    void GoToNextWaypoint()
+    {
+        if (waypoints.Count == 0)
+        {
+            Debug.Log("No waypoints in waypoints array");
+            return;
+        }
+        agent.destination = waypoints[waypointsIndex].position;
+        waypointsIndex = (waypointsIndex + 1) % waypoints.Count;
+    }
+
+    // Update is called once per frame
+    void Update()
+    {
+        if (!agent.pathPending && agent.remainingDistance < 0.5f)
+        {
+            GoToNextWaypoint();
+        }
+    }
+}
diff --git a/Assets/Scripts/NPC.cs.meta b/Assets/Scripts/NPC.cs.meta
new file mode 100644
index 0000000..c59456a
--- /dev/null
+++ b/Assets/Scripts/NPC.cs.meta
@@ -0,0 +1,11 @@
+fileFormatVersion: 2
+guid: 1adbf2b3702ef7c4b84711958630614c
+MonoImporter:
+  externalObjects: {}
+  serializedVersion: 2
+  defaultReferences: []
+  executionOrder: 0
+  icon: {instanceID: 0}
+  userData: 
+  assetBundleName: 
+  assetBundleVariant: 
diff --git a/Assets/Scripts/PlayerMovement.cs b/Assets/Scripts/PlayerMovement.cs
index 8017bdb..e5deee1 100644
--- a/Assets/Scripts/PlayerMovement.cs
+++ b/Assets/Scripts/PlayerMovement.cs
@@ -9,6 +9,10 @@ public class PlayerMovement : MonoBehaviour
 
     public float MovementSpeed = 12f;
     public IInputReader InputReader;
+
+    private static float RUNNING_SPEED = 12f;
+    private static float CROUCHING_SPEED = 4f;
+    private bool isCrouched = false;
     public PlayerMovement()
     {
         InputReader = new InputReader();
@@ -17,11 +21,18 @@ public class PlayerMovement : MonoBehaviour
     // Update is called once per frame
     void Update()
     {
+        if (InputReader.getButtonDown("Crouch"))
+        {
+            isCrouched = !isCrouched;
+            MovementSpeed = isCrouched ? CROUCHING_SPEED : RUNNING_SPEED;
+        }
+
         float x = InputReader.getMoveSide();
         float z = InputReader.getMoveForwards();
 
         Vector3 move = transform.right * x + transform.forward * z;
 
         controller.Move(move * MovementSpeed * Time.deltaTime);
+
     }
 }
diff --git a/Assets/Scripts/Tests/InputTests.cs b/Assets/Scripts/Tests/InputTests.cs
index 641bcde..24a7c7a 100644
--- a/Assets/Scripts/Tests/InputTests.cs
+++ b/Assets/Scripts/Tests/InputTests.cs
@@ -105,5 +105,44 @@ namespace Tests
             assertSimilar(startingPos.y, player.transform.position.y);
             Assert.Less(startingPos.x, player.transform.position.x);
         }
+        [UnityTest]
+        public IEnumerator TestCrouch()
+        {
+            GameObject player = GameObject.Find("Player");
+            GameObject camera = player.transform.Find("Main Camera").gameObject;
+            var startingCamHeight = camera.transform.position;
+
+            var sub = Substitute.For<IInputReader>();
+            sub.getButtonDown("Crouch").Returns(true);
+            player.GetComponent<PlayerMovement>().InputReader = sub;
+            camera.GetComponent<MouseLook>().InputReader = sub;
+
+            yield return new WaitForSeconds(0);
+
+            Assert.Greater(startingCamHeight.y, camera.transform.position.y);
+
+            yield return new WaitForSeconds(0);
+            Assert.AreEqual(startingCamHeight.y, camera.transform.position.y);
+        }
+
+        [UnityTest]
+        public IEnumerator TestCrouchMovementSpeed()
+        {
+            GameObject player = GameObject.Find("Player");
+            GameObject camera = player.transform.Find("Main Camera").gameObject;
+            PlayerMovement movement = player.GetComponent<PlayerMovement>();
+            var moveSpeed = movement.MovementSpeed;
+
+            Assert.AreEqual(moveSpeed, 12f);
+
+            var sub = Substitute.For<IInputReader>();
+            sub.getButtonDown("Crouch").Returns(true);
+            player.GetComponent<PlayerMovement>().InputReader = sub;
+            camera.GetComponent<MouseLook>().InputReader = sub;
+
+            yield return new WaitForSeconds(0);
+
+            Assert.Less(movement.MovementSpeed, moveSpeed);
+        }
     }
 }
